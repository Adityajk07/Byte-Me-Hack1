<<<<<<< HEAD
generator client {
  provider = "prisma-client-js"
=======
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
>>>>>>> 4cd068f7fe4bf76d2ac3dd9a17a1fbd8982e123e
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
<<<<<<< HEAD

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  chatRooms    ChatRoom[] @relation("ChatRoomUsers")
  createdRooms ChatRoom[] @relation("ChatRoomCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatRoom {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  creatorId   String
  creator     User      @relation("ChatRoomCreator", fields: [creatorId], references: [id])
  users       User[]    @relation("ChatRoomUsers")
  messages    Message[]
  isGroup     Boolean   @default(false)
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  roomId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  reactions Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
} 
=======
>>>>>>> 4cd068f7fe4bf76d2ac3dd9a17a1fbd8982e123e

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
  reactions     Reaction[]
  chatRooms     ChatRoom[] @relation("ChatRoomUsers")
  createdRooms  ChatRoom[] @relation("ChatRoomCreator")
  readMessages Message[] @relation("ReadMessages")
  emailVerifications EmailVerification[] 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatRoom {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  creatorId   String
  creator     User      @relation("ChatRoomCreator", fields: [creatorId], references: [id])
  users       User[]    @relation("ChatRoomUsers")
  messages    Message[]
  isGroup     Boolean   @default(false)
  dmKey       String?   @unique // Only set for DMs, e.g. "user1id_user2id"
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  emotion           String?
  avatarExpression  String?
  userId    String
  roomId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  readBy User[] @relation("ReadMessages")
  attachments MessageAttachment[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  createdAt DateTime @default(now())
  userId    String
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model EmailVerification {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MessageAttachment {
  id        String   @id @default(cuid())
  url       String
  type      String
  name      String?
  size      Int?
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
